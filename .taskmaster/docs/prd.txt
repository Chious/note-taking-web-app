# Note-Taking Web App - Product Requirements Document

## Project Overview
A full-stack note-taking web application with user authentication, CRUD operations, search functionality, and theming capabilities. Built with Next.js, Tailwind CSS, PostgreSQL, and Prisma ORM.

## Core Features

### User Authentication
- User registration and login system (email/password)
- Google OAuth 2.0 authentication (Sign in with Google)
- Password reset functionality via email (for email/password users)
- JWT-based authentication with protected routes
- Session management and token validation
- Support for multiple authentication providers

### Note Management (CRUD)
- Create new notes with title, content, and tags
- Read/view all notes in dashboard
- Update existing notes with auto-save functionality
- Delete notes with confirmation
- Archive/unarchive notes
- Real-time content synchronization
- Edit history tracking for undo/redo functionality
- Version control with timestamped snapshots
- Restore to previous versions of notes

### Search & Filtering
- Search notes by title, content, and tags
- Filter notes by specific tags
- Advanced search with keyword matching
- Search result highlighting

### User Interface & Experience
- Responsive design for all device sizes
- Multiple color themes (light/dark mode)
- Multiple font theme options
- WYSIWYG rich text editor with undo/redo support
- Keyboard shortcuts (Ctrl+Z for undo, Ctrl+Y for redo)
- Keyboard navigation support (accessibility)
- Hover and focus states for interactive elements
- Form validation with error messages

### Advanced Features (Bonus)
- Real-time collaborative editing via WebSocket
- Image upload and storage (S3-compatible)
- Email notifications for password reset
- User profile management

## Technical Requirements

### Frontend Stack
- Next.js 14+ with App Router
- TypeScript for type safety
- Tailwind CSS for styling
- React Query for state management
- Zod for data validation
- WYSIWYG Editor integration

### Backend Stack
- Next.js API routes
- Prisma ORM with PostgreSQL
- JWT authentication
- File upload handling
- Email service integration (SMTP)

### DevOps & Testing
- Docker Compose for development
- GitHub Actions for CI/CD
- Vitest for testing
- ESLint and Prettier for code quality

## API Endpoints

### Authentication Routes
- POST /api/login - User login (email/password)
- POST /api/register - User registration (email/password)
- GET /api/auth/google - Google OAuth login
- GET /api/auth/google/callback - Google OAuth callback
- POST /api/forgot-password - Password reset request
- POST /api/reset-password - Password reset confirmation

### Protected Note Routes (require Bearer token)
- GET /api/notes - Retrieve all user notes (with search query support)
- POST /api/notes - Create new note
- PUT /api/notes/:id - Update existing note
- DELETE /api/notes/:id - Delete note
- GET /api/search - Advanced note search

## Database Schema

### Users Table
- id (string, primary key)
- email (string, unique)
- password (string, hashed, nullable for OAuth users)
- name (string, nullable)
- image (string, nullable, for profile picture)
- provider (string, default: 'email', values: 'email'|'google')
- providerId (string, nullable, for OAuth provider user ID)
- createdAt (datetime)
- updatedAt (datetime)

### Notes Table
- id (string, primary key)
- userId (string, foreign key)
- title (string)
- content (text)
- tags (string array)
- isArchived (boolean)
- createdAt (datetime)
- updatedAt (datetime)
- lastEdited (datetime)

### Note History Table
- id (string, primary key)
- noteId (string, foreign key to Notes)
- title (string)
- content (text)
- tags (string array)
- version (integer, auto-increment)
- changeType (string, values: 'create'|'update'|'title_change'|'content_change'|'tags_change')
- createdAt (datetime)
- userId (string, foreign key to Users)

## User Stories

### Authentication Flow
1. As a new user, I want to register an account (email/password or Google) so I can start taking notes
2. As a registered user, I want to login using my preferred method (email/password or Google) to access my notes
3. As a user with email/password account, I want to reset my password if I forget it
4. As a user, I want to sign in quickly with my Google account without creating a separate password

### Note Management
1. As a user, I want to create new notes with rich text content
2. As a user, I want to organize my notes with tags
3. As a user, I want to search through my notes quickly
4. As a user, I want to archive old notes to keep my workspace clean
5. As a user, I want my notes to auto-save so I don't lose work
6. As a user, I want to undo my recent changes using Ctrl+Z
7. As a user, I want to redo undone changes using Ctrl+Y
8. As a user, I want to see the edit history of my notes
9. As a user, I want to restore my note to a previous version
10. As a user, I want to see when each version was created

### User Experience
1. As a user, I want to choose between light and dark themes
2. As a user, I want to navigate the app using only my keyboard
3. As a user, I want the app to work well on my mobile device
4. As a user, I want clear feedback when forms have errors

## Acceptance Criteria

### Core Functionality
- Users can perform all CRUD operations on notes
- Search functionality works across title, content, and tags  
- Authentication protects user data
- Notes auto-save with debounced updates
- Archive functionality separates active and inactive notes
- Undo/redo functionality works reliably with keyboard shortcuts
- Edit history is preserved and accessible to users
- Version restoration works without data loss

### User Interface
- Responsive design works on desktop, tablet, and mobile
- Theme switching persists across sessions
- Keyboard shortcuts work for common actions (Ctrl+S, Ctrl+Z, etc.)
- Form validation provides clear error messages
- Loading states and feedback for all async operations

### Performance & Security
- Protected routes require valid authentication
- Passwords are properly hashed and secured
- Database queries are optimized
- Images are stored efficiently with S3-compatible service
- Real-time features work without performance degradation

## Success Metrics
- Users can create and manage notes efficiently
- Search returns relevant results within 500ms
- Authentication flow has minimal friction
- App loads and responds quickly on all devices
- Zero data loss with auto-save functionality
