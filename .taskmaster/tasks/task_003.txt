# Task ID: 3
# Title: Authentication System Implementation
# Status: pending
# Dependencies: 1, 2
# Priority: high
# Description: Implement user registration, login, and JWT-based authentication with protected routes
# Details:
1. Install required packages:
```bash
npm install bcryptjs jsonwebtoken zod next-auth
npm install -D @types/bcryptjs @types/jsonwebtoken
```
2. Create authentication utilities in lib/auth.ts:
```typescript
import { compare, hash } from 'bcryptjs';
import { sign, verify } from 'jsonwebtoken';

export async function hashPassword(password: string): Promise<string> {
  return hash(password, 12);
}

export async function verifyPassword(password: string, hashedPassword: string): Promise<boolean> {
  return compare(password, hashedPassword);
}

export function generateToken(userId: string): string {
  return sign({ userId }, process.env.JWT_SECRET!, { expiresIn: '7d' });
}

export function verifyToken(token: string): { userId: string } | null {
  try {
    return verify(token, process.env.JWT_SECRET!) as { userId: string };
  } catch (error) {
    return null;
  }
}
```
3. Create registration API endpoint at app/api/register/route.ts:
```typescript
import { NextResponse } from 'next/server';
import { z } from 'zod';
import prisma from '@/lib/db';
import { hashPassword } from '@/lib/auth';

const registerSchema = z.object({
  email: z.string().email(),
  password: z.string().min(8),
});

export async function POST(request: Request) {
  try {
    const body = await request.json();
    const { email, password } = registerSchema.parse(body);
    
    const existingUser = await prisma.user.findUnique({ where: { email } });
    if (existingUser) {
      return NextResponse.json({ error: 'Email already in use' }, { status: 400 });
    }
    
    const hashedPassword = await hashPassword(password);
    const user = await prisma.user.create({
      data: { email, password: hashedPassword },
    });
    
    return NextResponse.json({ id: user.id, email: user.email }, { status: 201 });
  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json({ error: error.errors }, { status: 400 });
    }
    return NextResponse.json({ error: 'Registration failed' }, { status: 500 });
  }
}
```
4. Create login API endpoint at app/api/login/route.ts
5. Implement middleware for protected routes
6. Set up NextAuth.js for session management
7. Create protected route wrapper component

# Test Strategy:
1. Test user registration with valid and invalid data
2. Test login with correct and incorrect credentials
3. Verify JWT token generation and validation
4. Test protected routes with and without authentication
5. Verify password hashing security
6. Test session persistence and expiration
7. Validate error handling for authentication failures
