# Task ID: 11
# Title: Theme and Font Customization
# Status: pending
# Dependencies: 7
# Priority: medium
# Description: Implement theme switching (light/dark) and font customization options
# Details:
1. Create theme provider component in app/components/theme-provider.tsx:
```typescript
'use client';

import { createContext, useContext, useEffect, useState } from 'react';

type Theme = 'light' | 'dark' | 'system';
type Font = 'sans' | 'serif' | 'mono';

interface ThemeProviderProps {
  children: React.ReactNode;
  defaultTheme?: Theme;
  defaultFont?: Font;
  enableSystem?: boolean;
  attribute?: string;
}

type ThemeProviderState = {
  theme: Theme;
  font: Font;
  setTheme: (theme: Theme) => void;
  setFont: (font: Font) => void;
};

const initialState: ThemeProviderState = {
  theme: 'system',
  font: 'sans',
  setTheme: () => null,
  setFont: () => null,
};

const ThemeProviderContext = createContext<ThemeProviderState>(initialState);

export function ThemeProvider({
  children,
  defaultTheme = 'system',
  defaultFont = 'sans',
  enableSystem = true,
  attribute = 'class',
  ...props
}: ThemeProviderProps) {
  const [theme, setTheme] = useState<Theme>(defaultTheme);
  const [font, setFont] = useState<Font>(defaultFont);
  
  useEffect(() => {
    const root = window.document.documentElement;
    
    // Remove previous font class
    root.classList.remove('font-sans', 'font-serif', 'font-mono');
    
    // Add current font class
    root.classList.add(`font-${font}`);
    
    // Handle theme
    root.classList.remove('light', 'dark');
    
    if (theme === 'system' && enableSystem) {
      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches
        ? 'dark'
        : 'light';
      
      root.classList.add(systemTheme);
      return;
    }
    
    root.classList.add(theme);
  }, [theme, font, enableSystem]);
  
  const value = {
    theme,
    font,
    setTheme,
    setFont,
  };
  
  return (
    <ThemeProviderContext.Provider {...props} value={value}>
      {children}
    </ThemeProviderContext.Provider>
  );
}

export const useTheme = () => {
  const context = useContext(ThemeProviderContext);
  
  if (context === undefined) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  
  return context;
};
```
2. Create settings page in app/settings/page.tsx:
```typescript
'use client';

import { useTheme } from '@/components/theme-provider';

export default function SettingsPage() {
  const { theme, setTheme, font, setFont } = useTheme();
  
  return (
    <div className="container mx-auto py-8 px-4">
      <h1 className="text-2xl font-bold mb-6">Settings</h1>
      
      <div className="space-y-8">
        <div>
          <h2 className="text-xl font-medium mb-4">Theme</h2>
          <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
            <button
              onClick={() => setTheme('light')}
              className={`p-4 border rounded-lg flex items-center justify-center ${theme === 'light' ? 'border-blue-500 ring-2 ring-blue-500' : 'border-gray-200 dark:border-gray-700'}`}
            >
              <div className="text-center">
                <div className="w-16 h-16 rounded-full bg-gray-100 mx-auto mb-2 flex items-center justify-center">
                  <span>‚òÄÔ∏è</span>
                </div>
                <span>Light</span>
              </div>
            </button>
            
            <button
              onClick={() => setTheme('dark')}
              className={`p-4 border rounded-lg flex items-center justify-center ${theme === 'dark' ? 'border-blue-500 ring-2 ring-blue-500' : 'border-gray-200 dark:border-gray-700'}`}
            >
              <div className="text-center">
                <div className="w-16 h-16 rounded-full bg-gray-800 mx-auto mb-2 flex items-center justify-center">
                  <span>üåô</span>
                </div>
                <span>Dark</span>
              </div>
            </button>
            
            <button
              onClick={() => setTheme('system')}
              className={`p-4 border rounded-lg flex items-center justify-center ${theme === 'system' ? 'border-blue-500 ring-2 ring-blue-500' : 'border-gray-200 dark:border-gray-700'}`}
            >
              <div className="text-center">
                <div className="w-16 h-16 rounded-full bg-gradient-to-r from-gray-100 to-gray-800 mx-auto mb-2 flex items-center justify-center">
                  <span>üíª</span>
                </div>
                <span>System</span>
              </div>
            </button>
          </div>
        </div>
        
        <div>
          <h2 className="text-xl font-medium mb-4">Font</h2>
          <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
            <button
              onClick={() => setFont('sans')}
              className={`p-4 border rounded-lg ${font === 'sans' ? 'border-blue-500 ring-2 ring-blue-500' : 'border-gray-200 dark:border-gray-700'}`}
            >
              <p className="font-sans text-lg mb-2">Sans Serif</p>
              <p className="font-sans text-sm text-gray-500 dark:text-gray-400">Clean and modern</p>
            </button>
            
            <button
              onClick={() => setFont('serif')}
              className={`p-4 border rounded-lg ${font === 'serif' ? 'border-blue-500 ring-2 ring-blue-500' : 'border-gray-200 dark:border-gray-700'}`}
            >
              <p className="font-serif text-lg mb-2">Serif</p>
              <p className="font-serif text-sm text-gray-500 dark:text-gray-400">Traditional and elegant</p>
            </button>
            
            <button
              onClick={() => setFont('mono')}
              className={`p-4 border rounded-lg ${font === 'mono' ? 'border-blue-500 ring-2 ring-blue-500' : 'border-gray-200 dark:border-gray-700'}`}
            >
              <p className="font-mono text-lg mb-2">Monospace</p>
              <p className="font-mono text-sm text-gray-500 dark:text-gray-400">Code-like and precise</p>
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}
```
3. Update Tailwind configuration to support font themes:
```javascript
// tailwind.config.js
module.exports = {
  darkMode: 'class',
  content: [
    './app/**/*.{js,ts,jsx,tsx}',
    './components/**/*.{js,ts,jsx,tsx}',
  ],
  theme: {
    extend: {
      fontFamily: {
        sans: ['var(--font-sans)', 'system-ui', 'sans-serif'],
        serif: ['var(--font-serif)', 'Georgia', 'serif'],
        mono: ['var(--font-mono)', 'monospace'],
      },
    },
  },
  plugins: [require('@tailwindcss/typography')],
};
```
4. Add font loading in layout.tsx
5. Implement theme persistence with localStorage
6. Add system theme detection and synchronization

# Test Strategy:
1. Test theme switching between light, dark, and system modes
2. Verify font switching between sans-serif, serif, and monospace
3. Test theme persistence across page refreshes
4. Validate system theme detection and synchronization
5. Test theme provider with different default settings
6. Verify theme application to all components
7. Test accessibility of theme switching controls
8. Validate responsive design of settings page
